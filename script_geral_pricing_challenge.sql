/* 
=========================================================
AUTOR: laercio.serra@gmail.com
DATA: 02/10/2016
EMPRESA: B2W
OBJETIVO: PRICING CHALLENGE
=========================================================
*/

-- CRIACAO DO BANCO DE DADOS NO MYSQL
CREATE DATABASE b2w /* DEFAULT CHARACTER SET UTF8 */;

USE b2w;

-- CRIACAO DAS TABELAS NO MYSQL
-- STAGE AREA

CREATE TABLE b2w.sa_comp_prices (
  PROD_ID varchar(5),
  DATE_EXTRACTION datetime DEFAULT NULL,
  COMPETITOR varchar(5),
  COMPETITOR_PRICE double DEFAULT NULL,
  PAY_TYPE int(11) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

ALTER TABLE b2w.sa_comp_prices 
ADD INDEX idx_comp_prices (PROD_ID ASC, DATE_EXTRACTION ASC, COMPETITOR ASC);

CREATE TABLE b2w.sa_sales (
  PROD_ID varchar(5),
  DATE_ORDER datetime DEFAULT NULL,
  QTY_ORDER double DEFAULT NULL,
  REVENUE double DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

ALTER TABLE b2w.sa_sales
ADD INDEX idx_sales (PROD_ID ASC, DATE_ORDER ASC);

-- POPULA A TABELA SA_COMP_PRICES
-- A PARTIR DO ARQUIVO 'CSV' DISPONIBILIZADO

LOAD DATA INFILE '/home/lserra/Documents/b2w/bases/comp_prices.csv'
INTO TABLE b2w.sa_comp_prices
FIELDS TERMINATED BY ','
LINES TERMINATED BY '\n';

-- POPULA A TABELA SA_SALES
-- A PARTIR DO ARQUIVO 'CSV' DISPONIBILIZADO

LOAD DATA INFILE '/home/lserra/Documents/b2w/bases/sales.csv'
INTO TABLE b2w.sa_sales
FIELDS TERMINATED BY ','
LINES TERMINATED BY '\n';

-- CRIACAO DAS TABELAS NO MYSQL
-- ODS

CREATE TABLE b2w.ods_sales (
  PROD_ID varchar(5) NOT NULL,
  DATE_ORDER date DEFAULT NULL,
  QTY_ORDER double DEFAULT NULL,
  SALES double DEFAULT NULL,
  UNIT_PRICE double DEFAULT NULL,
  KEY idx_sales (PROD_ID,DATE_ORDER)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

CREATE TABLE b2w.ods_comp_prices (
  PROD_ID varchar(5) NOT NULL,
  DATE_EXTRACTION date DEFAULT NULL,
  COMPETITOR varchar(5) DEFAULT NULL,
  COMPETITOR_PRICE double DEFAULT NULL,
  PAY_TYPE int(11) DEFAULT NULL,
  KEY idx_comp_prices (PROD_ID,DATE_EXTRACTION,COMPETITOR)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

-- POPULA A TABELA ODS_SALES

INSERT INTO b2w.ods_sales (PROD_ID,DATE_ORDER,QTY_ORDER,SALES,UNIT_PRICE)
SELECT s.PROD_ID,s.DATE_ORDER,s.QTY_ORDER,s.REVENUE,(s.REVENUE/s.QTY_ORDER) AS 'UNIT_PRICE'
FROM b2w.sa_sales s;

-- POPULA A TABELA ODS_COMP_PRICES

INSERT INTO b2w.ods_comp_prices (PROD_ID, DATE_EXTRACTION, COMPETITOR, COMPETITOR_PRICE, PAY_TYPE)
SELECT DISTINCT cp.PROD_ID,cp.DATE_EXTRACTION,cp.COMPETITOR,cp.COMPETITOR_PRICE,cp.PAY_TYPE
FROM b2w.sa_comp_prices cp;

-- CRIACAO DAS TABELAS NO MYSQL
-- DATA MART

CREATE TABLE b2w.dw_dim_prod (
  SK_PROD int NOT NULL AUTO_INCREMENT,
  PRODUCT varchar(5) NOT NULL,
  PRIMARY KEY (SK_PROD),
  INDEX idx_dim_prod (PRODUCT ASC)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;;

CREATE TABLE b2w.dw_dim_comp (
  SK_COMP int NOT NULL AUTO_INCREMENT,
  COMPETITOR varchar(5) NOT NULL,
  PRIMARY KEY (SK_COMP),
  INDEX idx_dim_comp (COMPETITOR ASC)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;;

CREATE TABLE b2w.dw_dim_time (
  SK_TIME int NOT NULL AUTO_INCREMENT,
  DATE date NOT NULL,
  DAY int(11) NOT NULL,
  MONTH int(11) NOT NULL,
  YEAR int(11) NOT NULL,
  WEEK int(11) NOT NULL,
  WEEKDAY varchar(5) NOT NULL,
  EVENT varchar(20) NOT NULL,
  PRIMARY KEY (SK_TIME),
  INDEX idx_dw_dim_time ('DATE')
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

CREATE TABLE b2w.dw_dim_pay (
  SK_PAY int(11) NOT NULL AUTO_INCREMENT,
  PAY_TYPE varchar(20) NOT NULL COMMENT 'Payment Method (1=deferred payment, 2=immediate payment)',
  PRIMARY KEY (SK_PAY)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

-- POPULA A TABELA DIM_COMP

INSERT INTO b2w.dw_dim_comp (COMPETITOR)
SELECT DISTINCT cp.COMPETITOR 
FROM b2w.sa_comp_prices cp
ORDER BY 1;

-- POPULA A TABELA DIM_PROD

INSERT INTO b2w.dw_dim_prod (PRODUCT)
SELECT DISTINCT s.PROD_ID 
FROM b2w.sa_sales s
ORDER BY 1;

-- POPULA A TABELA dw_dim_time
-- CRIACAO DA PROCEDURE DE CARGA 

DROP PROCEDURE IF EXISTS load_dw_dim_time;

DELIMITER $$

CREATE PROCEDURE load_dw_dim_time()
BEGIN
  DECLARE di DATE;
  DECLARE df DATE;

  DELETE FROM b2w.dw_dim_time;
   
  SELECT '2015-01-01' INTO di;
  SELECT '2015-12-31' INTO df;
    
  WHILE (di <= df) DO
   
    INSERT INTO b2w.dw_dim_time (
          DATE,
          DAY,
          MONTH,
          YEAR,
          WEEK,
          WEEKDAY,
          EVENT)
    SELECT 
            (di) AS 'DATE',
            RIGHT(CONCAT('0',DAY(di)),2) AS 'DAY',
            MONTH(di) AS 'MONTH',
            YEAR(di) AS 'YEAR',            
            WEEK(di) AS 'WEEK',
            WEEKDAY(di) AS 'WEEKDAY',
            'NO EVENT' AS EVENT;
   
    SET di = DATE_ADD(di, INTERVAL 1 DAY);
   
  END WHILE;

END$$

DELIMITER ;

CALL load_dw_dim_time;

-- UPDATE NA TABELA DW_DIM_TIME

UPDATE b2w.dw_dim_time SET WEEKDAY = 'SUN' WHERE WEEKDAY = '0';
UPDATE b2w.dw_dim_time SET WEEKDAY = 'MON' WHERE WEEKDAY = '1';
UPDATE b2w.dw_dim_time SET WEEKDAY = 'TUE' WHERE WEEKDAY = '2';
UPDATE b2w.dw_dim_time SET WEEKDAY = 'WED' WHERE WEEKDAY = '3';
UPDATE b2w.dw_dim_time SET WEEKDAY = 'THU' WHERE WEEKDAY = '4';
UPDATE b2w.dw_dim_time SET WEEKDAY = 'FRI' WHERE WEEKDAY = '5';
UPDATE b2w.dw_dim_time SET WEEKDAY = 'SAT' WHERE WEEKDAY = '6';

UPDATE b2w.dw_dim_time SET EVENT = 'CARNAVAL' WHERE DATE = '2015-02-14';
UPDATE b2w.dw_dim_time SET EVENT = 'CARNAVAL' WHERE DATE = '2015-02-15';
UPDATE b2w.dw_dim_time SET EVENT = 'CARNAVAL' WHERE DATE = '2015-02-16';
UPDATE b2w.dw_dim_time SET EVENT = 'CARNAVAL' WHERE DATE = '2015-02-17';
UPDATE b2w.dw_dim_time SET EVENT = 'CARNAVAL' WHERE DATE = '2015-02-18';
UPDATE b2w.dw_dim_time SET EVENT = 'PAIXAO' WHERE DATE = '2015-03-04';
UPDATE b2w.dw_dim_time SET EVENT = 'PASCOA' WHERE DATE = '2015-04-05';
UPDATE b2w.dw_dim_time SET EVENT = 'TIRADENTES' WHERE DATE = '2015-04-21';
UPDATE b2w.dw_dim_time SET EVENT = 'SAO JORGE' WHERE DATE = '2015-04-23';
UPDATE b2w.dw_dim_time SET EVENT = 'TRABALHO' WHERE DATE = '2015-05-01';
UPDATE b2w.dw_dim_time SET EVENT = 'MAES' WHERE DATE = '2015-05-10';
UPDATE b2w.dw_dim_time SET EVENT = 'CORPUS CHRISTI' WHERE DATE = '2015-06-04';
UPDATE b2w.dw_dim_time SET EVENT = 'PAIS' WHERE DATE = '2015-08-09';
UPDATE b2w.dw_dim_time SET EVENT = 'INDEPENDENCIA' WHERE DATE = '2015-09-07';
UPDATE b2w.dw_dim_time SET EVENT = 'CRIANCAS' WHERE DATE = '2015-10-12';
UPDATE b2w.dw_dim_time SET EVENT = 'PROFESSORES' WHERE DATE = '2015-10-15';
UPDATE b2w.dw_dim_time SET EVENT = 'FINADOS' WHERE DATE = '2015-11-02';
UPDATE b2w.dw_dim_time SET EVENT = 'REPUBLICA' WHERE DATE = '2015-11-15';
UPDATE b2w.dw_dim_time SET EVENT = 'BANDEIRA' WHERE DATE = '2015-11-19';
UPDATE b2w.dw_dim_time SET EVENT = 'CONSCIENCIA NEGRA' WHERE DATE = '2015-11-20';
UPDATE b2w.dw_dim_time SET EVENT = 'NATAL' WHERE DATE = '2015-12-25';

-- POPULA A TABELA DW_DIM_PAY

INSERT INTO b2w.dw_dim_pay (PAY_TYPE) VALUES ('DEFERRED');
INSERT INTO b2w.dw_dim_pay (PAY_TYPE) VALUES ('IMMEDIATE');

-- CRIACAO DA TABELA FATO DE VENDAS

CREATE TABLE b2w.dw_ft_sales (
  SK_SALE INT NOT NULL AUTO_INCREMENT,
  SK_TIME INT NOT NULL,
  SK_PROD INT NOT NULL,
  QTY_ORDER DOUBLE NOT NULL,
  SALES DOUBLE NOT NULL,
  UNIT_PRICE DOUBLE NOT NULL
  PRIMARY KEY (SK_SALE),
  INDEX idx_ft_sales (SK_TIME ASC, SK_PROD ASC)
  )ENGINE=MyISAM DEFAULT CHARSET=utf8;

-- POPULA A TABELA FATO DE VENDAS

INSERT INTO b2w.dw_ft_sales (
  SK_TIME,
  SK_PROD,
  QTY_ORDER,
  SALES,
  UNIT_PRICE
)
SELECT 
	  dt.SK_TIME, 
    dp.SK_PROD, 
    s.QTY_ORDER, 
    s.SALES, 
    s.UNIT_PRICE
FROM 
  	b2w.ods_sales s INNER JOIN b2w.dw_dim_time dt
    ON s.DATE_ORDER = dt.DATE
    
    INNER JOIN b2w.dw_dim_prod dp
    ON s.PROD_ID = dp.PRODUCT;

-- CRIACAO DA VIEW GERENCIAL DIARIA
-- VENDAS AGREGADAS: DIA X PRODUTO

CREATE VIEW b2w.vw_ger_sales_day AS 
SELECT 
    dt.DATE,
    dp.PRODUCT, 
    SUM(fs.QTY_ORDER) AS QTY_ORDER, 
    ROUND(SUM(fs.SALES),2) AS SALES,
    ROUND(AVG(fs.SALES),2) AS AVG_SALES, 
    ROUND(MIN(fs.UNIT_PRICE),2) AS MIN_UNIT_PRICE, 
    ROUND(MAX(fs.UNIT_PRICE),2) AS MAX_UNIT_PRICE,
    (ROUND(MAX(fs.UNIT_PRICE),2)-ROUND(MIN(fs.UNIT_PRICE),2)) AS DIFF_UNIT_PRICE,
    ROUND(((MAX(fs.UNIT_PRICE)/MIN(fs.UNIT_PRICE))-1)*100,2) AS VAR_UNIT_PRICE,
    ROUND(AVG(fs.UNIT_PRICE),2) AS AVG_PRICE,
    SUM(fs.QTY_ORDER) AS TOTAL_ITEMS, 
    ROUND(AVG(fs.QTY_ORDER),2) AS AVG_ITEMS
FROM 
  	b2w.dw_ft_sales fs inner join b2w.dw_dim_time dt
    on fs.SK_TIME = dt.SK_TIME
    
    inner join b2w.dw_dim_prod dp
    on fs.SK_PROD = dp.SK_PROD
GROUP BY dt.DATE, dp.PRODUCT;

-- CRIACAO DA VIEW GERENCIAL SEMANAL
-- VENDAS AGREGADAS: SEM X PRODUTO

CREATE VIEW b2w.vw_ger_sales_week AS 
SELECT 
    dt.WEEK,
    dp.PRODUCT, 
    SUM(fs.QTY_ORDER) AS QTY_ORDER, 
    ROUND(SUM(fs.SALES),2) AS SALES,
    ROUND(AVG(fs.SALES),2) AS AVG_SALES, 
    ROUND(MIN(fs.UNIT_PRICE),2) AS MIN_UNIT_PRICE, 
    ROUND(MAX(fs.UNIT_PRICE),2) AS MAX_UNIT_PRICE,
    (ROUND(MAX(fs.UNIT_PRICE),2)-ROUND(MIN(fs.UNIT_PRICE),2)) AS DIFF_UNIT_PRICE,
    ROUND(((MAX(fs.UNIT_PRICE)/MIN(fs.UNIT_PRICE))-1)*100,2) AS VAR_UNIT_PRICE,
    ROUND(AVG(fs.UNIT_PRICE),2) AS AVG_PRICE,
    SUM(fs.QTY_ORDER) AS TOTAL_ITEMS, 
    ROUND(AVG(fs.QTY_ORDER),2) AS AVG_ITEMS
FROM 
  	b2w.dw_ft_sales fs inner join b2w.dw_dim_time dt
    on fs.SK_TIME = dt.SK_TIME
    
    inner join b2w.dw_dim_prod dp
    on fs.SK_PROD = dp.SK_PROD
GROUP BY dt.WEEK, dp.PRODUCT;

-- CRIACAO DA VIEW GERENCIAL MENSAL
-- VENDAS AGREGADAS: MES X PRODUTO

CREATE VIEW b2w.vw_ger_sales_month AS 
SELECT 
    dt.MONTH,
    dp.PRODUCT, 
    SUM(fs.QTY_ORDER) AS QTY_ORDER, 
    ROUND(SUM(fs.SALES),2) AS SALES,
    ROUND(AVG(fs.SALES),2) AS AVG_SALES, 
    ROUND(MIN(fs.UNIT_PRICE),2) AS MIN_UNIT_PRICE, 
    ROUND(MAX(fs.UNIT_PRICE),2) AS MAX_UNIT_PRICE,
    (ROUND(MAX(fs.UNIT_PRICE),2)-ROUND(MIN(fs.UNIT_PRICE),2)) AS DIFF_UNIT_PRICE,
    ROUND(((MAX(fs.UNIT_PRICE)/MIN(fs.UNIT_PRICE))-1)*100,2) AS VAR_UNIT_PRICE,
    ROUND(AVG(fs.UNIT_PRICE),2) AS AVG_PRICE,
    SUM(fs.QTY_ORDER) AS TOTAL_ITEMS, 
    ROUND(AVG(fs.QTY_ORDER),2) AS AVG_ITEMS
FROM 
  	b2w.dw_ft_sales fs inner join b2w.dw_dim_time dt
    on fs.SK_TIME = dt.SK_TIME
    
    inner join b2w.dw_dim_prod dp
    on fs.SK_PROD = dp.SK_PROD
GROUP BY dt.MONTH, dp.PRODUCT;

-- PESQUISANDO OUTLIERS NA TABELA
-- ODS_COMP_PRICES

SELECT 
  COMPETITOR, 
  MIN(COMPETITOR_PRICE), 
  MAX(COMPETITOR_PRICE), 
  ROUND(((MAX(COMPETITOR_PRICE)/(MIN(COMPETITOR_PRICE)/100))-100),2) AS PERC,
  CASE 
    WHEN ROUND(((MAX(COMPETITOR_PRICE)/(MIN(COMPETITOR_PRICE)/100))-100),2) > 100 THEN 'APAGAR'
    ELSE 'NAO APAGAR'
  END AS STATUS
FROM b2w.ods_comp_prices
WHERE PROD_ID = 'P6'
GROUP BY COMPETITOR;

SELECT COMPETITOR, MIN(COMPETITOR_PRICE), MAX(COMPETITOR_PRICE)
FROM b2w.ods_comp_prices
WHERE PROD_ID = 'P6'
GROUP BY COMPETITOR;    

SELECT COMPETITOR, MIN(COMPETITOR_PRICE), MAX(COMPETITOR_PRICE)
FROM b2w.sa_comp_prices
WHERE PROD_ID = 'P6'
GROUP BY COMPETITOR; 

SELECT DISTINCT COMPETITOR, COMPETITOR_PRICE
FROM b2w.ods_comp_prices
WHERE PROD_ID = 'P6' AND COMPETITOR = 'C1'
ORDER BY 1, 2;  

-- TRATANDO OS DADOS (OUTLIERS) NA TAB COMP_PRICES

DROP PROCEDURE IF EXISTS find_outliers_comp_prices;

DELIMITER $$

CREATE PROCEDURE find_outliers_comp_prices()
BEGIN

  DROP TABLE IF EXISTS outliers;

  CREATE TEMPORARY TABLE outliers
  SELECT 
    COMPETITOR, 
    COMPETITOR_PRICE, 
    ROUND(COMPETITOR_PRICE) AS CP,
    CASE 
        WHEN LENGTH(ROUND(COMPETITOR_PRICE)) = 6 THEN 'APAGAR'
        ELSE 'NAO APAGAR'
    END AS STATUS
  FROM b2w.ods_comp_prices;

  UPDATE b2w.ods_comp_prices t1 INNER JOIN (
    SELECT DISTINCT CP FROM outliers WHERE STATUS = 'APAGAR'
    ) t2
    ON t1.COMPETITOR_PRICE = t2.CP
  SET
    t1.COMPETITOR_PRICE = t2.CP/100;

END$$

DELIMITER ;

CALL find_outliers_comp_prices;

-- CRIACAO DA TABELA FATO DE COMPETIDORES

CREATE TABLE b2w.dw_ft_comp_prices (
  SK_CP INT NOT NULL AUTO_INCREMENT,
  SK_TIME INT NOT NULL,
  SK_PROD INT NOT NULL,
  SK_COMPETITOR INT NOT NULL,
  SK_PAY INT NOT NULL,  
  COMPETITOR_PRICE DOUBLE NOT NULL,
  NUM_EXTRACTIONS INT(5) NOT NULL,
  PRIMARY KEY (SK_CP),
  INDEX idx_ft_cp (SK_TIME ASC, SK_PROD ASC, SK_COMPETITOR ASC)
  )ENGINE=MyISAM DEFAULT CHARSET=utf8;

-- POPULA A TABELA FATO DE COMPETIDORES

INSERT INTO b2w.dw_ft_comp_prices (
  SK_TIME,
  SK_PROD,
  SK_COMPETITOR,
  SK_PAY,
  COMPETITOR_PRICE,
  NUM_EXTRACTIONS
)
SELECT 
  dt.SK_TIME,
  dp.SK_PROD,
  dc.SK_COMP,
  cp.PAY_TYPE AS SK_PAY,
  cp.COMPETITOR_PRICE,
  COUNT(*) AS NUM_EXTRACTIONS    
FROM 
    b2w.ods_comp_prices cp INNER JOIN b2w.dw_dim_time dt
    ON cp.DATE_EXTRACTION = dt.DATE
    
    INNER JOIN b2w.dw_dim_prod dp
    ON cp.PROD_ID = dp.PRODUCT
    
    INNER JOIN b2w.dw_dim_comp dc
    ON cp.COMPETITOR = dc.COMPETITOR
GROUP BY 
  dt.SK_TIME,
  dp.SK_PROD,
  dc.SK_COMP,
  cp.PAY_TYPE,
  cp.COMPETITOR_PRICE;

-- CRIACAO DA VIEW GERENCIAL DIARIA
-- VENDAS AGREGADAS: DIA X PRODUTO X COMPETIDOR X PRICE

CREATE VIEW b2w.vw_ger_cp_day AS 
SELECT 
  dt.DATE,
  dp.PRODUCT,
  dc.COMPETITOR,
  dy.PAY_TYPE,
  cp.COMPETITOR_PRICE,
  cp.NUM_EXTRACTIONS,
  ROUND(MIN(cp.COMPETITOR_PRICE),2) AS MIN_UNIT_PRICE, 
  ROUND(MAX(cp.COMPETITOR_PRICE),2) AS MAX_UNIT_PRICE,
  (ROUND(MAX(cp.COMPETITOR_PRICE),2)-ROUND(MIN(cp.COMPETITOR_PRICE),2)) AS DIFF_UNIT_PRICE,
  ROUND(((MAX(cp.COMPETITOR_PRICE)/MIN(cp.COMPETITOR_PRICE))-1)*100,2) AS VAR_UNIT_PRICE,
  ROUND(AVG(cp.COMPETITOR_PRICE),2) AS AVG_PRICE
FROM 
    b2w.dw_ft_comp_prices cp INNER JOIN b2w.dw_dim_time dt
    ON cp.SK_TIME = dt.SK_TIME
    
    INNER JOIN b2w.dw_dim_prod dp
    ON cp.SK_PROD = dp.SK_PROD
    
    INNER JOIN b2w.dw_dim_comp dc
    ON cp.SK_COMPETITOR = dc.SK_COMP
    
    INNER JOIN b2w.dw_dim_pay dy
    on cp.SK_PAY = dy.SK_PAY
GROUP BY 
  dt.DATE,
  dp.PRODUCT,
  dc.COMPETITOR,
  dy.PAY_TYPE,
  cp.COMPETITOR_PRICE,
  cp.NUM_EXTRACTIONS;

-- CRIACAO DA VIEW GERENCIAL SEMANAL
-- VENDAS AGREGADAS: SEMANA X PRODUTO X COMPETIDOR X PRICE

CREATE VIEW b2w.vw_ger_cp_week AS 
SELECT 
  dt.WEEK,
  dp.PRODUCT,
  dc.COMPETITOR,
  dy.PAY_TYPE,
  ROUND(SUM(cp.COMPETITOR_PRICE),2) AS COMPETITOR_PRICE,
  SUM(cp.NUM_EXTRACTIONS) AS NUM_EXTRACTIONS,
  ROUND(MIN(cp.COMPETITOR_PRICE),2) AS MIN_UNIT_PRICE, 
  ROUND(MAX(cp.COMPETITOR_PRICE),2) AS MAX_UNIT_PRICE,
  (ROUND(MAX(cp.COMPETITOR_PRICE),2)-ROUND(MIN(cp.COMPETITOR_PRICE),2)) AS DIFF_UNIT_PRICE,
  ROUND(((MAX(cp.COMPETITOR_PRICE)/MIN(cp.COMPETITOR_PRICE))-1)*100,2) AS VAR_UNIT_PRICE,
  ROUND(AVG(cp.COMPETITOR_PRICE),2) AS AVG_PRICE
FROM 
    b2w.dw_ft_comp_prices cp INNER JOIN b2w.dw_dim_time dt
    ON cp.SK_TIME = dt.SK_TIME
    
    INNER JOIN b2w.dw_dim_prod dp
    ON cp.SK_PROD = dp.SK_PROD
    
    INNER JOIN b2w.dw_dim_comp dc
    ON cp.SK_COMPETITOR = dc.SK_COMP
    
    INNER JOIN b2w.dw_dim_pay dy
    on cp.SK_PAY = dy.SK_PAY
GROUP BY 
  dt.WEEK,
  dp.PRODUCT,
  dc.COMPETITOR,
  dy.PAY_TYPE;

-- CRIACAO DA VIEW GERENCIAL MENSAL
-- VENDAS AGREGADAS: MES X PRODUTO X COMPETIDOR X PRICE

CREATE VIEW b2w.vw_ger_cp_month AS 
SELECT 
  dt.MONTH,
  dp.PRODUCT,
  dc.COMPETITOR,
  dy.PAY_TYPE,
  ROUND(SUM(cp.COMPETITOR_PRICE),2) AS COMPETITOR_PRICE,
  SUM(cp.NUM_EXTRACTIONS) AS NUM_EXTRACTIONS,
  ROUND(MIN(cp.COMPETITOR_PRICE),2) AS MIN_UNIT_PRICE, 
  ROUND(MAX(cp.COMPETITOR_PRICE),2) AS MAX_UNIT_PRICE,
  (ROUND(MAX(cp.COMPETITOR_PRICE),2)-ROUND(MIN(cp.COMPETITOR_PRICE),2)) AS DIFF_UNIT_PRICE,
  ROUND(((MAX(cp.COMPETITOR_PRICE)/MIN(cp.COMPETITOR_PRICE))-1)*100,2) AS VAR_UNIT_PRICE,
  ROUND(AVG(cp.COMPETITOR_PRICE),2) AS AVG_PRICE
FROM 
    b2w.dw_ft_comp_prices cp INNER JOIN b2w.dw_dim_time dt
    ON cp.SK_TIME = dt.SK_TIME
    
    INNER JOIN b2w.dw_dim_prod dp
    ON cp.SK_PROD = dp.SK_PROD
    
    INNER JOIN b2w.dw_dim_comp dc
    ON cp.SK_COMPETITOR = dc.SK_COMP
    
    INNER JOIN b2w.dw_dim_pay dy
    on cp.SK_PAY = dy.SK_PAY
GROUP BY 
  dt.MONTH,
  dp.PRODUCT,
  dc.COMPETITOR,
  dy.PAY_TYPE;  

-- EXPORTACAO DOS DADOS
-- SALES
SELECT * INTO  OUTFILE '/home/lserra/Documents/b2w/bases/vw_ger_sales_day.csv'
FIELDS TERMINATED BY ','
LINES TERMINATED BY '\n'
FROM vw_ger_sales_day;

SELECT * INTO  OUTFILE '/home/lserra/Documents/b2w/bases/vw_ger_sales_week.csv'
FIELDS TERMINATED BY ','
LINES TERMINATED BY '\n'
FROM vw_ger_sales_week;

SELECT * INTO  OUTFILE '/home/lserra/Documents/b2w/bases/vw_ger_sales_month.csv'
FIELDS TERMINATED BY ','
LINES TERMINATED BY '\n'
FROM vw_ger_sales_month;

-- COMP_PRICES
SELECT * INTO  OUTFILE '/home/lserra/Documents/b2w/bases/vw_ger_cp_day.csv'
FIELDS TERMINATED BY ','
LINES TERMINATED BY '\n'
FROM vw_ger_cp_day;

SELECT * INTO  OUTFILE '/home/lserra/Documents/b2w/bases/vw_ger_cp_week.csv'
FIELDS TERMINATED BY ','
LINES TERMINATED BY '\n'
FROM vw_ger_cp_week;

SELECT * INTO  OUTFILE '/home/lserra/Documents/b2w/bases/vw_ger_cp_month.csv'
FIELDS TERMINATED BY ','
LINES TERMINATED BY '\n'
FROM vw_ger_cp_month;